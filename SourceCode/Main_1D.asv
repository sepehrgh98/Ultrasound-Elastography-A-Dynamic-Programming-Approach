clc;
clear all

% Loading data
% OriginalImg=[1;2;3;4;5;6;7;8;9;10;11;12;13;14;15];
% CompressedImg=[0;2;3;4;6;7;8;9;10;9;10;11;12;13;14];

load '..\RFData\rf01.mat'
OriginalImg = RfDataDouble(1:1700,:);
maxIm = max(OriginalImg(:));
OriginalImg = OriginalImg/maxIm;


load '..\RFData\rf03.mat'
CompressedImg = RfDataDouble(1:1700,:);
CompressedImg = CompressedImg/maxIm;

% figure;imagesc(OriginalImg); colormap gray; colorbar; title('Original Image');
% figure;imagesc(CompressedImg); colormap gray; colorbar; title('Compressed Image');



% Initialization
w=.15; %this is the regularization weight
[imHight, imWidth] = size(OriginalImg);
dmin = -3;
dmax = 3;
windowSize = 1;
d = dmin:1:dmax; % displacement vector
noDisp = size(d,2); % number of possible displacements
displacementMap = zeros(imHight, imWidth);


fprintf('Process Started...\n');

for colIdx = 1:imWidth
    colIdx = colIdx
    % Initialization
    g = OriginalImg(:,colIdx);
    g_prime = CompressedImg(:,colIdx);
    C = zeros(imHight, noDisp); % Costs storge (pixel => displacement vector)
    M = NaN(imHight, noDisp);
    D = zeros(imHight,1);
    
    % Initialize First row  
    C(1,:) = delta1d('pixelIndex',1,'displacement',d,'g', g, "g_prime", g_prime);
%     M(1,:) = ones(1, noDisp);
    
    for pixIdx = 2:imHight
        minimizedValues = NaN(1, noDisp);
        minimizedValuesIndex =  NaN(1, noDisp);
        for disIdx = 1:noDisp
            selectedIdx = max(disIdx - windowSize,1):min(disIdx + windowSize,noDisp);
            preC = C(pixIdx - 1,selectedIdx);
            [minValue, minIdx] = min(preC + w*S1d(d(disIdx), d(selectedIdx), 2));
            if disIdx == 1 
                minIdx = minIdx+1;
            end
            minimizedValues(1, disIdx) = minValue;
            expectedIdx = (minIdx - 2) + disIdx;
            expectedIdx = max(expectedIdx,1);
            minimizedValuesIndex(1, disIdx) = expectedIdx;
        end
        C(pixIdx,:) = minimizedValues + delta1d('pixelIndex',pixIdx,'displacement',d,'g', g, "g_prime", g_prime);
        M(pixIdx,:) = minimizedValuesIndex;  
    end
%     % Traceback Index
%     [~, D(end, 1)] = min(C(end, :));
%     
%     for mIdx = imHight-1:-1:1
%         D(mIdx, 1) = M(mIdx+1, D(mIdx+1, 1));
%     end
%     
%     displacementMap(:, colIdx) = d(D);
    %Traceback with indexes
    len=size(g,1);
    [val,idx]=min(C(len,:));
    D_idx=zeros(len,1);
    D_idx(len)=idx;
    for i=1:len-1
        j=len-i;
        D_idx(j)=M(j+1,D_idx(j+1));
    end

    D=d(D_idx)';
    displacementMap(:,colIdx)=D;
%     break;
end

fprintf('Process Finished...\n');
fprintf('Showing Results...\n');

% Results
figure;imagesc(displacementMap(:,1)); colormap gray; colorbar; title('Axial Displacement');


